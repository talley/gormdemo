package main

import (
	json "encoding/json"
	"fmt"
	_ "hellogorm/docs" // docs is generated by swag
	"log"
	"net/http"
	"strconv"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger"
)

func main() {

	e := echo.New()
	e.GET("/swagger/*", echoSwagger.WrapHandler)
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	// CORS restricted
	// Allows requests from any `https://labstack.com` or `https://labstack.net` origin
	// wth GET, PUT, POST or DELETE method.
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: []string{"https://labstack.com", "https://labstack.net", "http://localhost:1323"},
		AllowMethods: []string{http.MethodGet, http.MethodPut, http.MethodPost, http.MethodDelete},
	}))

	// welcome
	e.GET("/", func(c echo.Context) error {
		return c.String(http.StatusOK, "Hello, World!")
	})

	// get all products
	e.GET("/products", func(c echo.Context) error {
		products, err := GetProducts()
		if err != nil {
			fmt.Println("Error getting products:", err)
			fmt.Println(err)
		}
		jsonData, err := json.Marshal(products)
		if err != nil {
			log.Fatal(err)
		}
		return c.JSON(200, string(jsonData)) //.String(http.StatusOK, "Hello, World!")
	})

	// get product by id
	e.GET("/products/:id", func(c echo.Context) error {
		id := c.Param("id")
		productid, err := strconv.Atoi(id) // string → int
		if err != nil {
			//c.JSON(400, gin.H{"error": "Invalid ID"})
			fmt.Println("Error converting id to int:", err)
		}
		product, err := GetProduct(productid)
		if err != nil {
			log.Fatal(err)
		}
		jsonData, err := json.Marshal(product)
		if err != nil {
			log.Fatal(err)
		}
		return c.JSON(200, string(jsonData))
	})

	//add product
	e.POST("/products", func(c echo.Context) error {
		var product Product
		//var body = c.Request().Body
		// Bind request body JSON into Product struct
		if err := c.Bind(&product); err != nil {
			return c.JSON(http.StatusBadRequest, map[string]string{
				"error": "Invalid request body",
			})
		}

		err := AddProduct(product)
		if err != nil {
			fmt.Println("Error getting products:", err)
			fmt.Println(err)
		}
		jsonData, err := json.Marshal(product)
		if err != nil {
			log.Fatal(err)
		}
		return c.JSON(http.StatusOK, string(jsonData))
	})

	//Update product
	e.PUT("/products/:id", func(c echo.Context) error {
		idStr := c.Param("id")
		productID, err := strconv.Atoi(idStr)
		if err != nil {
			return c.JSON(http.StatusBadRequest, map[string]string{"error": "invalid id"})
		}

		var req Product
		if err := c.Bind(&req); err != nil {
			return c.JSON(http.StatusBadRequest, map[string]string{"error": "invalid JSON body"})
		}

		// Ensure we update the record specified by the URL, not whatever is in the body
		req.ID = uint(productID)

		updated, err := UpdateProduct(productID, req)
		if err != nil {
			return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
		}

		return c.JSON(http.StatusOK, updated)
	})

	//delete product
	e.DELETE("/products/:id", func(c echo.Context) error {
		id := c.Param("id")
		productid, err := strconv.Atoi(id) // string → int
		if err != nil {
			//c.JSON(400, gin.H{"error": "Invalid ID"})
			fmt.Println("Error converting id to int:", err)
		}
		product, err := DeleteProduct(productid)
		if err != nil {
			log.Fatal(err)
		}
		jsonData, err := json.Marshal(product)
		if err != nil {
			log.Fatal(err)
		}
		return c.JSON(200, string(jsonData))
	})

	e.Logger.Fatal(e.Start(":1323"))
	fmt.Println("Server started at localhost:1323")

}
